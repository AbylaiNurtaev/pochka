import React from 'react';
import { View, Text, TouchableOpacity, StyleSheet } from 'react-native';
// –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—ã –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —ç—Ç—É –±–∏–±–ª–∏–æ—Ç–µ–∫—É –¥–ª—è –º–∞—Å–æ–∫
import { MaskedTextInput } from 'react-native-mask-text'; 
import Animated, { SlideInRight, SlideOutLeft } from 'react-native-reanimated';
// –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ, –¥–æ–±–∞–≤—å—Ç–µ –∏–∫–æ–Ω–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, react-native-vector-icons)
import Icon from 'react-native-vector-icons/Ionicons'; 

// –í–∞—à–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–∏–ø—ã –∏ —É—Ç–∏–ª–∏—Ç—ã
import { SurveyData, SurveyTexts } from './types';
import { computeBmi, computeBsa, bmiCategory } from './utils';

// --- –ò–ú–ü–û–†–¢ –ò–ö–û–ù–û–ö ---
const MaleIcon = ({ active }: { active: boolean }) => (
  <Icon 
    name="man-sharp" 
    size={30} 
    color={active ? '#FFFFFF' : '#374151'} 
  />
);
const FemaleIcon = ({ active }: { active: boolean }) => (
  <Icon 
    name="woman-sharp" 
    size={30} 
    color={active ? '#FFFFFF' : '#374151'} 
  />
);
// --------------------

interface SurveyStepProps {
  step: number;
  data: SurveyData;
  setData: (data: SurveyData) => void;
  text: SurveyTexts;
  language: 'ru' | 'kz' | 'en';
  touched: Record<number, boolean>;
  isStepOptional: (step: number) => boolean;
  isStepValid: (step: number) => boolean;
}

export const SurveyStep: React.FC<SurveyStepProps> = ({
  step,
  data,
  setData,
  text,
  language,
  touched,
  isStepOptional,
  isStepValid
}) => {
  
  // –•–µ–ª–ø–µ—Ä –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è, –Ω—É–∂–Ω–æ –ª–∏ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –æ—à–∏–±–∫—É
  const shouldShowError = (stepNum: number) => 
    !isStepOptional(stepNum) && touched[stepNum] && !isStepValid(stepNum);

  const renderStepContent = () => {
    switch (step) {
      case 1: // –ò–º—è (—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π TextInput, –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å mask='A*' –¥–ª—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è —Å–∏–º–≤–æ–ª–æ–≤)
        return (
          <Animated.View entering={SlideInRight.duration(350)} exiting={SlideOutLeft.duration(250)} style={styles.stepContent}>
            <Text style={styles.stepTitle}>{text.steps.name} üë§</Text>
            <MaskedTextInput
              mask={Array(50).fill('A').join('')} // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∞–∫—Å. –¥–ª–∏–Ω—É –∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–ª—Ñ–∞–≤–∏—Ç–∞/—á–∏—Å–µ–ª (A - alpha/digit)
              style={[
                styles.input,
                shouldShowError(1) && styles.inputError,
                data.name && styles.inputFocused, // –í–∏–∑—É–∞–ª—å–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç, –µ—Å–ª–∏ –ø–æ–ª–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ
              ]}
              placeholder={text.placeholders.name}
              value={data.name || ''}
              onChangeText={(_, unmasked) => setData({ ...data, name: unmasked })}
              placeholderTextColor="#9CA3AF"
            />
            {shouldShowError(1) && (
              <Text style={styles.errorText}>
                {language === 'kz' ? '–ê—Ç—ã“£—ã–∑–¥—ã –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–∫–µ–º—ñ–Ω–¥–µ 2 —Å–∏–º–≤–æ–ª)' : '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∏–º—è (–º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)'}
              </Text>
            )}
          </Animated.View>
        );

      case 2: // –î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è (DD.MM.YYYY –º–∞—Å–∫–∞)
        const dateMask = "99.99.9999";
        return (
          <Animated.View entering={SlideInRight.duration(350)} exiting={SlideOutLeft.duration(250)} style={styles.stepContent}>
            <Text style={styles.stepTitle}>{text.steps.dob} üéÇ</Text>
            <MaskedTextInput
              mask={dateMask}
              keyboardType="numeric"
              style={[
                styles.input,
                shouldShowError(2) && styles.inputError,
                data.birthDate && styles.inputFocused,
              ]}
              placeholder={text.placeholders.dob}
              value={data.birthDate || ''}
              onChangeText={(masked, unmasked) => setData({ ...data, birthDate: masked })}
              placeholderTextColor="#9CA3AF"
            />
            {shouldShowError(2) && (
              <Text style={styles.errorText}>
                {language === 'kz' ? '–¢—É“ì–∞–Ω –∫“Ø–Ω—ñ“£—ñ–∑–¥—ñ –∫”©—Ä—Å–µ—Ç—ñ“£—ñ–∑ (–î–î.–ú–ú.–ì–ì–ì–ì)' : '–£–∫–∞–∂–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è (–î–î.–ú–ú.–ì–ì–ì–ì)'}
              </Text>
            )}
          </Animated.View>
        );

      case 3: // –ü–æ–ª (–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω —Å –∏–∫–æ–Ω–∫–∞–º–∏)
        const isMale = data.gender === 'male';
        const isFemale = data.gender === 'female';
        
        return (
          <Animated.View entering={SlideInRight.duration(350)} exiting={SlideOutLeft.duration(250)} style={styles.stepContent}>
            <Text style={styles.stepTitle}>{text.steps.gender} üöª</Text>
            <View style={styles.genderContainer}>
              <TouchableOpacity
                style={[
                  styles.genderButton,
                  isMale && styles.genderButtonActive,
                  shouldShowError(3) && !data.gender && styles.genderButtonError
                ]}
                onPress={() => setData({ ...data, gender: 'male' })}
              >
                <MaleIcon active={isMale} />
                <Text style={[
                  styles.genderButtonText,
                  isMale && styles.genderButtonTextActive
                ]}>
                  {text.gender.male}
                </Text>
              </TouchableOpacity>
              <TouchableOpacity
                style={[
                  styles.genderButton,
                  isFemale && styles.genderButtonActive,
                  shouldShowError(3) && !data.gender && styles.genderButtonError
                ]}
                onPress={() => setData({ ...data, gender: 'female' })}
              >
                <FemaleIcon active={isFemale} />
                <Text style={[
                  styles.genderButtonText,
                  isFemale && styles.genderButtonTextActive
                ]}>
                  {text.gender.female}
                </Text>
              </TouchableOpacity>
            </View>
            {shouldShowError(3) && (
              <Text style={styles.errorText}>
                {language === 'kz' ? '–ë—ñ—Ä –Ω“±—Å“õ–∞–Ω—ã —Ç–∞“£–¥–∞“£—ã–∑' : '–í—ã–±–µ—Ä–∏—Ç–µ –æ–¥–∏–Ω –≤–∞—Ä–∏–∞–Ω—Ç'}
              </Text>
            )}
          </Animated.View>
        );

      case 4: // –†–æ—Å—Ç (–ß–∏—Å–ª–æ–≤–∞—è –º–∞—Å–∫–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º " —Å–º")
        return (
          <Animated.View entering={SlideInRight.duration(350)} exiting={SlideOutLeft.duration(250)} style={styles.stepContent}>
            <Text style={styles.stepTitle}>{text.steps.height} üìè</Text>
            <View style={styles.inputAffixContainer}>
                <MaskedTextInput
                    mask="999" // –ú–∞–∫—Å–∏–º—É–º 3 —Ü–∏—Ñ—Ä—ã (40-250)
                    keyboardType="numeric"
                    style={[
                        styles.input,
                        styles.inputAffix,
                        shouldShowError(4) && styles.inputError,
                        data.heightCm && styles.inputFocused,
                    ]}
                    placeholder={text.placeholders.height}
                    value={data.heightCm?.toString() || ''}
                    onChangeText={(_, unmasked) => setData({ ...data, heightCm: unmasked ? parseInt(unmasked, 10) : undefined })}
                    placeholderTextColor="#9CA3AF"
                    maxLength={3} // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 3 —Ü–∏—Ñ—Ä—ã
                />
                <Text style={styles.affixText}>—Å–º</Text>
            </View>
            {shouldShowError(4) && (
              <Text style={styles.errorText}>
                {language === 'kz' ? '–ë–æ–π—ã“£—ã–∑–¥—ã 40-250 —Å–º –∞—Ä–∞–ª—ã“ì—ã–Ω–¥–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑' : '–í–≤–µ–¥–∏—Ç–µ —Ä–æ—Å—Ç –æ—Ç 40 –¥–æ 250 —Å–º'}
              </Text>
            )}
          </Animated.View>
        );

      case 5: // –í–µ—Å (–ß–∏—Å–ª–æ–≤–∞—è –º–∞—Å–∫–∞ —Å —Å—É—Ñ—Ñ–∏–∫—Å–æ–º " –∫–≥")
        return (
          <Animated.View entering={SlideInRight.duration(350)} exiting={SlideOutLeft.duration(250)} style={styles.stepContent}>
            <Text style={styles.stepTitle}>{text.steps.weight} ‚öñÔ∏è</Text>
            <View style={styles.inputAffixContainer}>
                <MaskedTextInput
                    mask="999" // –ú–∞–∫—Å–∏–º—É–º 3 —Ü–∏—Ñ—Ä—ã (10-400)
                    keyboardType="numeric"
                    style={[
                        styles.input,
                        styles.inputAffix,
                        shouldShowError(5) && styles.inputError,
                        data.weightKg && styles.inputFocused,
                    ]}
                    placeholder={text.placeholders.weight}
                    value={data.weightKg?.toString() || ''}
                    onChangeText={(_, unmasked) => setData({ ...data, weightKg: unmasked ? parseInt(unmasked, 10) : undefined })}
                    placeholderTextColor="#9CA3AF"
                    maxLength={3} // –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ 3 —Ü–∏—Ñ—Ä—ã
                />
                <Text style={styles.affixText}>–∫–≥</Text>
            </View>
            {shouldShowError(5) && (
              <Text style={styles.errorText}>
                {language === 'kz' ? '–°–∞–ª–º–∞“ì—ã“£—ã–∑–¥—ã 10-400 –∫–≥ –∞—Ä–∞–ª—ã“ì—ã–Ω–¥–∞ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑' : '–í–≤–µ–¥–∏—Ç–µ –≤–µ—Å –æ—Ç 10 –¥–æ 400 –∫–≥'}
              </Text>
            )}
          </Animated.View>
        );

      case 6: // BMI —Ä–µ–∑—É–ª—å—Ç–∞—Ç (–£–ª—É—á—à–µ–Ω–Ω—ã–π –¥–∏–∑–∞–π–Ω)
        const bmi = computeBmi(data.heightCm, data.weightKg);
        const bsa = computeBsa(data.heightCm, data.weightKg);
        const bmiStatus = bmiCategory(bmi, language);
        
        // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —Ü–≤–µ—Ç —Å—Ç–∞—Ç—É—Å–∞ BMI
        let statusColor = '#6b7280'; // Default
        if (bmi && bmi < 18.5) statusColor = '#3b82f6'; // Blue for Underweight
        else if (bmi && bmi >= 18.5 && bmi < 25) statusColor = '#00A86B'; // Green for Normal
        else if (bmi && bmi >= 25 && bmi < 30) statusColor = '#f59e0b'; // Yellow/Orange for Overweight
        else if (bmi && bmi >= 30) statusColor = '#ef4444'; // Red for Obesity

        return (
          <Animated.View entering={SlideInRight.duration(350)} exiting={SlideOutLeft.duration(250)} style={styles.stepContent}>
            <Text style={styles.stepTitle}>{text.steps.bmiResult} üìä</Text>
            <View style={styles.bmiContainer}>
              <View style={[styles.bmiResultCard, { borderColor: statusColor + '40' }]}>
                <Text style={styles.bmiValue}>{bmi?.toFixed(1) ?? '‚Äî'}</Text>
                <Text style={[styles.bmiStatus, { color: statusColor }]}>{bmiStatus}</Text>
              </View>
              
              <View style={styles.bsaContainer}>
                <Text style={styles.bsaTitle}>
                  {language === 'kz' ? '–î–µ–Ω–µ –±–µ—Ç—ñ–Ω—ñ“£ –∞—É–¥–∞–Ω—ã (–ü–ü–¢)' : '–ü–ª–æ—â–∞–¥—å –ø–æ–≤–µ—Ä—Ö–Ω–æ—Å—Ç–∏ —Ç–µ–ª–∞ (–ü–ü–¢)'}
                </Text>
                <Text style={styles.bsaValue}>
                  {bsa ? `${bsa.toFixed(2)} –º¬≤` : '‚Äî'}
                </Text>
              </View>
            </View>
          </Animated.View>
        );

      default:
        return null;
    }
  };

  return (
    <View style={styles.container}>
      {renderStepContent()}
    </View>
  );
};

// --- –°–¢–ò–õ–ò (STYLING) ---
const styles = StyleSheet.create({
  container: {
    minHeight: 250, // –£–≤–µ–ª–∏—á–∏–º –≤—ã—Å–æ—Ç—É –¥–ª—è –ª—É—á—à–µ–≥–æ UX
    paddingHorizontal: 16,
    paddingVertical: 10,
  },
  stepContent: {
    flex: 1,
  },
  stepTitle: {
    fontSize: 22, // –ù–µ–º–Ω–æ–≥–æ —É–º–µ–Ω—å—à–∏–º –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è
    fontWeight: '700', // –°–¥–µ–ª–∞–µ–º –∂–∏—Ä–Ω–µ–µ
    color: '#111827', // –ë–æ–ª–µ–µ —Ç–µ–º–Ω—ã–π, –Ω–∞—Å—ã—â–µ–Ω–Ω—ã–π —Ü–≤–µ—Ç
    marginBottom: 28,
    textAlign: 'center',
    lineHeight: 30,
  },
  // --- Input Styles ---
  input: {
    borderWidth: 2, // –ß—É—Ç—å —Ç–æ–ª—â–µ —Ä–∞–º–∫–∞
    borderColor: '#E5E7EB',
    borderRadius: 12, // –ß—É—Ç—å –º–µ–Ω—å—à–µ —Å–∫—Ä—É–≥–ª–µ–Ω–∏–µ
    paddingHorizontal: 18,
    paddingVertical: 18, // –ë–æ–ª—å—à–µ –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø
    fontSize: 18, // –ö—Ä—É–ø–Ω–µ–µ —à—Ä–∏—Ñ—Ç
    color: '#111827',
    backgroundColor: '#F9FAFB', // –õ–µ–≥–∫–∏–π —Å–µ—Ä—ã–π —Ñ–æ–Ω
    fontWeight: '500',
  },
  inputFocused: {
    borderColor: '#00A86B', // –ó–µ–ª–µ–Ω—ã–π –ø—Ä–∏ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–∏
    backgroundColor: '#FFFFFF',
  },
  inputError: {
    borderColor: '#EF4444',
    backgroundColor: '#FEF2F2',
  },
  errorText: {
    color: '#EF4444',
    fontSize: 14,
    marginTop: 10,
    paddingLeft: 4,
    fontWeight: '500',
  },
  // --- Input Affix (—Å–º, –∫–≥) ---
  inputAffixContainer: {
    flexDirection: 'row',
    alignItems: 'center',
  },
  inputAffix: {
    flex: 1,
    paddingRight: 60, // –û—Å—Ç–∞–≤–ª—è–µ–º –º–µ—Å—Ç–æ –¥–ª—è —Å—É—Ñ—Ñ–∏–∫—Å–∞
  },
  affixText: {
    position: 'absolute',
    right: 20,
    fontSize: 18,
    color: '#6B7280',
    fontWeight: '500',
  },
  // --- Gender Buttons ---
  genderContainer: {
    flexDirection: 'row',
    gap: 16, // –£–≤–µ–ª–∏—á–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  },
  genderButton: {
    flex: 1,
    paddingVertical: 20,
    borderRadius: 16,
    borderWidth: 2,
    borderColor: '#D1D5DB',
    backgroundColor: '#FFFFFF',
    alignItems: 'center',
    justifyContent: 'center',
    gap: 8, // –ü—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ –º–µ–∂–¥—É –∏–∫–æ–Ω–∫–æ–π –∏ —Ç–µ–∫—Å—Ç–æ–º
    shadowColor: '#000', // –õ–µ–≥–∫–∞—è —Ç–µ–Ω—å –¥–ª—è "–≥–ª—É–±–∏–Ω—ã"
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.05,
    shadowRadius: 4,
    elevation: 3,
  },
  genderButtonActive: {
    backgroundColor: '#00A86B', // –Ø—Ä–∫–∏–π –∞–∫—Ü–µ–Ω—Ç
    borderColor: '#00A86B',
    shadowOpacity: 0.15,
  },
  genderButtonError: {
    borderColor: '#EF4444',
  },
  genderButtonText: {
    fontSize: 18, // –ö—Ä—É–ø–Ω–µ–µ —à—Ä–∏—Ñ—Ç
    fontWeight: '600',
    color: '#374151',
  },
  genderButtonTextActive: {
    color: '#FFFFFF',
  },
  // --- BMI/BSA Results ---
  bmiContainer: {
    alignItems: 'center',
    gap: 30, // –£–≤–µ–ª–∏—á–∏–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ
  },
  bmiResultCard: {
    alignItems: 'center',
    padding: 30,
    borderRadius: 20,
    borderWidth: 4, // –¢–æ–ª—Å—Ç–∞—è —Ä–∞–º–∫–∞
    backgroundColor: '#FFFFFF',
    width: '80%', // –°–¥–µ–ª–∞–µ–º –∫–∞—Ä—Ç–æ—á–∫—É —á—É—Ç—å –º–µ–Ω—å—à–µ
    shadowColor: '#000', 
    shadowOffset: { width: 0, height: 6 },
    shadowOpacity: 0.1,
    shadowRadius: 10,
    elevation: 10,
  },
  bmiValue: {
    fontSize: 64, // –ö—Ä—É–ø–Ω—ã–π, –∑–∞–º–µ—Ç–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fontWeight: '800',
    color: '#111827',
    marginBottom: 4,
  },
  bmiStatus: {
    fontSize: 22,
    fontWeight: '700',
    textTransform: 'uppercase', // –í—Å–µ –∑–∞–≥–ª–∞–≤–Ω—ã–µ
  },
  bsaContainer: {
    backgroundColor: 'rgba(59, 130, 246, 0.1)', // –°–≤–µ—Ç–ª–æ-–≥–æ–ª—É–±–æ–π —Ñ–æ–Ω
    padding: 24,
    borderRadius: 16,
    borderWidth: 1,
    borderColor: 'rgba(59, 130, 246, 0.3)',
    alignItems: 'center',
    width: '100%',
  },
  bsaTitle: {
    fontSize: 16,
    fontWeight: '600',
    color: '#1F2937',
    marginBottom: 10,
    textAlign: 'center',
  },
  bsaValue: {
    fontSize: 32, // –ö—Ä—É–ø–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    fontWeight: '800',
    color: '#3B82F6', // –Ø—Ä–∫–∏–π —Å–∏–Ω–∏–π –∞–∫—Ü–µ–Ω—Ç
  },
});